name: Reusable Merge Workflow with PR

on:
  workflow_call:
    inputs:
      from_branch:
        required: true
        type: string
      to_branch:
        required: true
        type: string
      slack_channel_id:
        required: true
        type: string
    secrets:
      SLACK_BOT_TOKEN:
        required: true
      PAT_TOKEN:
        required: true
      RED_TOKEN:
        required: true

jobs:
  merge-and-notify:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.RED_TOKEN }}
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Check for differences
        id: diff_check
        run: |
          git fetch origin ${{ inputs.from_branch }}
          git fetch origin ${{ inputs.to_branch }}
          
          # 差分があるかチェック
          if git diff --quiet origin/${{ inputs.to_branch }}..origin/${{ inputs.from_branch }}; then
            echo "has_diff=false" >> "$GITHUB_OUTPUT"
            echo "result=no-diff" >> "$GITHUB_OUTPUT"
          else
            echo "has_diff=true" >> "$GITHUB_OUTPUT"
            
            # マージ可能かチェック
            git checkout ${{ inputs.to_branch }}
            set +e
            git merge origin/${{ inputs.from_branch }} --no-commit --no-ff > merge_result.txt 2>&1
            MERGE_STATUS=$?
            set -e
            
            if [ $MERGE_STATUS -eq 0 ]; then
              git merge --abort || true
              echo "result=can-merge" >> "$GITHUB_OUTPUT"
            else
              git merge --abort || true
              echo "result=conflict" >> "$GITHUB_OUTPUT"
            fi
          fi

      - name: Create Pull Request
        if: steps.diff_check.outputs.result == 'can-merge'
        id: create_pr
        env:
          GH_TOKEN: ${{ secrets.RED_TOKEN }}
        run: |
          PR_TITLE="Auto-merge: ${{ inputs.from_branch }} → ${{ inputs.to_branch }}"
          PR_BODY="Automated merge from ${{ inputs.from_branch }} to ${{ inputs.to_branch }}"
          
          # 既存のPRがあるかチェック
          EXISTING_PR=$(gh pr list --head ${{ inputs.from_branch }} --base ${{ inputs.to_branch }} --json number --jq '.[0].number' || echo "")
          
          if [ -n "$EXISTING_PR" ] && [ "$EXISTING_PR" != "null" ]; then
            echo "pr_number=$EXISTING_PR" >> "$GITHUB_OUTPUT"
            echo "created=false" >> "$GITHUB_OUTPUT"
          else
            PR_NUMBER=$(gh pr create --title "$PR_TITLE" --body "$PR_BODY" --head ${{ inputs.from_branch }} --base ${{ inputs.to_branch }} --json number --jq '.number')
            echo "pr_number=$PR_NUMBER" >> "$GITHUB_OUTPUT"
            echo "created=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Auto-approve PR (if needed)
        if: steps.diff_check.outputs.result == 'can-merge' && steps.create_pr.outputs.pr_number
        env:
          GH_TOKEN: ${{ secrets.ADMIN_PAT }}
        run: |
          # レビューが必要な場合、自動承認
          gh pr review ${{ steps.create_pr.outputs.pr_number }} --approve --body "Automated approval for auto-merge"

      - name: Merge Pull Request
        if: steps.diff_check.outputs.result == 'can-merge' && steps.create_pr.outputs.pr_number
        id: merge_pr
        env:
          GH_TOKEN: ${{ secrets.RED_TOKEN }}
        run: |
          set +e
          gh pr merge ${{ steps.create_pr.outputs.pr_number }} --merge --delete-branch=false
          MERGE_STATUS=$?
          set -e
          
          if [ $MERGE_STATUS -eq 0 ]; then
            echo "result=merged" >> "$GITHUB_OUTPUT"
          else
            echo "result=merge-failed" >> "$GITHUB_OUTPUT"
          fi

      - name: Send Slack notification
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        run: |
          RESULT="${{ steps.diff_check.outputs.result }}"
          if [ "${{ steps.merge_pr.outputs.result }}" = "merged" ]; then
            RESULT="merged"
          elif [ "${{ steps.merge_pr.outputs.result }}" = "merge-failed" ]; then
            RESULT="merge-failed"
          fi
          
          FROM="${{ inputs.from_branch }}"
          TO="${{ inputs.to_branch }}"
          
          case "$RESULT" in
            merged)
              MESSAGE="✅ *${FROM} → ${TO}* にマージされました（PR経由）。"
              COLOR="good"
              ;;
            no-diff)
              MESSAGE="ℹ️ *${FROM} → ${TO}* のマージ対象に差分はありませんでした。"
              COLOR="warning"
              ;;
            conflict)
              MESSAGE="❌ *${FROM} → ${TO}* でマージコンフリクトが発生しました。"
              COLOR="danger"
              ;;
            merge-failed)
              MESSAGE="❌ *${FROM} → ${TO}* のPRマージに失敗しました。"
              COLOR="danger"
              ;;
            *)
              MESSAGE="⚠️ *${FROM} → ${TO}* の状態を判定できませんでした。"
              COLOR="danger"
              ;;
          esac

          # PR URLを取得（存在する場合）
          PR_URL=""
          if [ -n "${{ steps.create_pr.outputs.pr_number }}" ]; then
            PR_URL="${{ github.server_url }}/${{ github.repository }}/pull/${{ steps.create_pr.outputs.pr_number }}"
          fi

          curl -X POST https://slack.com/api/chat.postMessage \
            -H "Authorization: Bearer ${SLACK_BOT_TOKEN}" \
            -H 'Content-type: application/json; charset=utf-8' \
            --data "{
              \"channel\": \"${{ inputs.slack_channel_id }}\",
              \"text\": \"$MESSAGE\",
              \"attachments\": [
                {
                  \"color\": \"$COLOR\",
                  \"fields\": [
                    {
                      \"title\": \"ブランチ\",
                      \"value\": \"${FROM} → ${TO}\",
                      \"short\": true
                    },
                    {
                      \"title\": \"リポジトリ\",
                      \"value\": \"${{ github.repository }}\",
                      \"short\": true
                    },
                    {
                      \"title\": \"実行時刻\",
                      \"value\": \"$(TZ=Asia/Tokyo date +'%Y-%m-%d %H:%M:%S')\",
                      \"short\": true
                    }$(if [ -n \"$PR_URL\" ]; then echo ",
                    {
                      \"title\": \"Pull Request\",
                      \"value\": \"$PR_URL\",
                      \"short\": false
                    }"; fi),
                    {
                      \"title\": \"ログ\",
                      \"value\": \"${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}\",
                      \"short\": false
                    }
                  ]
                }
              ]
            }"